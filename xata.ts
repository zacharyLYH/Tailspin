// Generated by Xata Codegen 0.26.9. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "Site",
    columns: [
      { name: "field_name", type: "string" },
      { name: "field_value", type: "string" },
    ],
  },
  {
    name: "EmailSubmitRateLimiting",
    columns: [
      { name: "email", type: "string", unique: true },
      { name: "lastSubmission", type: "datetime", defaultValue: "now" },
    ],
  },
  {
    name: "SubmissionsMVP",
    columns: [
      { name: "email", type: "string" },
      { name: "code", type: "text" },
      { name: "challengeName", type: "string" },
      { name: "dateTime", type: "string" },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Site = InferredTypes["Site"];
export type SiteRecord = Site & XataRecord;

export type EmailSubmitRateLimiting = InferredTypes["EmailSubmitRateLimiting"];
export type EmailSubmitRateLimitingRecord = EmailSubmitRateLimiting &
  XataRecord;

export type SubmissionsMVP = InferredTypes["SubmissionsMVP"];
export type SubmissionsMVPRecord = SubmissionsMVP & XataRecord;

export type DatabaseSchema = {
  Site: SiteRecord;
  EmailSubmitRateLimiting: EmailSubmitRateLimitingRecord;
  SubmissionsMVP: SubmissionsMVPRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL:
    "https://tailspin-s-workspace-g57gt8.ap-southeast-2.xata.sh/db/Tailspin",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
